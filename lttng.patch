diff --git a/hack/lib/golang.sh b/hack/lib/golang.sh
index f23730b9446..36ce45466da 100755
--- a/hack/lib/golang.sh
+++ b/hack/lib/golang.sh
@@ -753,7 +753,7 @@ kube::golang::build_binaries_for_platform() {
       -ldflags="${goldflags}"
       -tags="${gotags:-}"
     )
-    CGO_ENABLED=0 kube::golang::build_some_binaries "${statics[@]}"
+    CGO_ENABLED=1 kube::golang::build_some_binaries "${statics[@]}"
   fi
 
   if [[ "${#nonstatics[@]}" != 0 ]]; then
diff --git a/pkg/kubelet/pod_workers.go b/pkg/kubelet/pod_workers.go
index e5805dbcf78..e6a0f70963e 100644
--- a/pkg/kubelet/pod_workers.go
+++ b/pkg/kubelet/pod_workers.go
@@ -23,6 +23,7 @@ import (
 	"sync"
 	"time"
 
+	lttng "github.com/BenjaminSaintCyr/k8s-lttng-tpp"
 	v1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/types"
 	"k8s.io/apimachinery/pkg/util/runtime"
@@ -1295,6 +1296,7 @@ func (p *podWorkers) podWorkerLoop(podUID types.UID, podUpdates <-chan struct{})
 
 		case update.WorkType == TerminatedPod:
 			// we can shut down the worker
+			lttng.ReportEvent("Terminated", fmt.Sprintf("UID: %s, Name: %s", string(podUID), podRef.Name))
 			p.completeTerminated(podUID)
 			if start := update.Options.StartTime; !start.IsZero() {
 				metrics.PodWorkerDuration.WithLabelValues("terminated").Observe(metrics.SinceInSeconds(start))
diff --git a/pkg/registry/core/pod/storage/storage.go b/pkg/registry/core/pod/storage/storage.go
index 5bdf342d068..9ab2fe2beb9 100644
--- a/pkg/registry/core/pod/storage/storage.go
+++ b/pkg/registry/core/pod/storage/storage.go
@@ -22,6 +22,7 @@ import (
 	"net/http"
 	"net/url"
 
+	lttng "github.com/BenjaminSaintCyr/k8s-lttng-tpp"
 	"k8s.io/apimachinery/pkg/api/errors"
 	"k8s.io/apimachinery/pkg/api/meta"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
@@ -241,6 +242,7 @@ func (r *BindingREST) setPodHostAndAnnotations(ctx context.Context, podUID types
 		for k, v := range annotations {
 			pod.Annotations[k] = v
 		}
+		lttng.ReportEvent("Condition", fmt.Sprintf("Type: %s, UID: %s, Name: %s", string(api.PodScheduled), string(pod.UID), pod.Name))
 		podutil.UpdatePodCondition(&pod.Status, &api.PodCondition{
 			Type:   api.PodScheduled,
 			Status: api.ConditionTrue,
diff --git a/staging/src/k8s.io/client-go/tools/record/event.go b/staging/src/k8s.io/client-go/tools/record/event.go
index 4899b362dff..f467f2c6dc2 100644
--- a/staging/src/k8s.io/client-go/tools/record/event.go
+++ b/staging/src/k8s.io/client-go/tools/record/event.go
@@ -22,6 +22,7 @@ import (
 	"math/rand"
 	"time"
 
+	lttng "github.com/BenjaminSaintCyr/k8s-lttng-tpp"
 	v1 "k8s.io/api/core/v1"
 	"k8s.io/apimachinery/pkg/api/errors"
 	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
@@ -357,6 +358,16 @@ func (recorder *recorderImpl) generateEvent(object runtime.Object, annotations m
 	event := recorder.makeEvent(ref, annotations, eventtype, reason, message)
 	event.Source = recorder.source
 
+	{
+		lttng_owners := event.GetOwnerReferences()
+		lttng_finalizers := event.GetFinalizers()
+		lttng_owners_uids := make([]string, len(lttng_owners))
+		for i, lttng_owner := range lttng_owners {
+			lttng_owners_uids[i] = string(lttng_owner.UID)
+		}
+		lttng.ReportEvent("Event", fmt.Sprintf("Source: %s, Type: %s, Reason: %s, Message: %s, UID: %s, Name: %s, Kind: %s, Owners: %v, Finalizers: %v", recorder.source, eventtype, reason, message, string(event.InvolvedObject.UID), event.InvolvedObject.Name, event.InvolvedObject.Kind, lttng_owners_uids, lttng_finalizers))
+	}
+
 	// NOTE: events should be a non-blocking operation, but we also need to not
 	// put this in a goroutine, otherwise we'll race to write to a closed channel
 	// when we go to shut down this broadcaster.  Just drop events if we get overloaded,
